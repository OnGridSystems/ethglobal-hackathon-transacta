{
  "address": "0xFe9ae2907dCdED590a4f38f5A9b3De2EbD8C9249",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC721",
          "name": "_token",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "networkId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "BridgeToL2",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_networkId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "bridgeToL2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "unbridge",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xdf4b2f25720643081718d1ff14a75498ba95cbba51d4867f732419b490550fb5",
  "receipt": {
    "to": null,
    "from": "0x8289275310690BD0409cF12087F9D504cA24c4D1",
    "contractAddress": "0xFe9ae2907dCdED590a4f38f5A9b3De2EbD8C9249",
    "transactionIndex": 32,
    "gasUsed": "414393",
    "logsBloom": "0x
    "blockHash": "0x8bb5ad74e3e6cac93608e92fe730a01989d824bd555bc262058f7a311c8282c8",
    "transactionHash": "0xdf4b2f25720643081718d1ff14a75498ba95cbba51d4867f732419b490550fb5",
    "logs": [],
    "blockNumber": 8703138,
    "cumulativeGasUsed": "2990502",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xD0aF11B17499baA91849512B41d8C12C8C2D5a35"
  ],
  "numDeployments": 1,
  "solcInputHash": "0d25b9ed61156364b0e252fcaf00dbbe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"_token\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"networkId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"BridgeToL2\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_networkId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"bridgeToL2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"unbridge\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"OnGrid Dev Team*\",\"kind\":\"dev\",\"methods\":{\"bridgeToL2(uint256,uint256)\":{\"details\":\"Withdraws NFT to replicate it on L2 side\",\"params\":{\"_networkId\":\"destination L2 network\",\"_tokenId\":\"token id to bridge\"}},\"unbridge(uint256,address)\":{\"details\":\"Returns NFT back when bridging from L2 to L1\",\"params\":{\"_to\":\"destination address\",\"_tokenId\":\"token id to unbridge\"}}},\"title\":\"L1BridgeRouter\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L1BridgeRouter.sol\":\"L1BridgeRouter\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/L1BridgeRouter.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.18;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\n\\n/**\\n * @title L1BridgeRouter\\n * @author OnGrid Dev Team\\n **/\\ncontract L1BridgeRouter is IERC721Receiver {\\n\\n    IERC721 public token;\\n\\n    event BridgeToL2(address from, uint256 networkId, uint256 tokenId);\\n\\n    constructor(IERC721 _token) {\\n        token = _token;\\n    }\\n\\n    /**\\n     * @dev Withdraws NFT to replicate it on L2 side\\n     * @param _networkId destination L2 network\\n     * @param _tokenId token id to bridge\\n     */\\n    function bridgeToL2(uint256 _networkId, uint256 _tokenId) public {\\n        // todo: check if _networkId supported. revert otherwise.\\n        token.safeTransferFrom(msg.sender, address(this), _tokenId);\\n        emit BridgeToL2(msg.sender, _networkId, _tokenId);\\n    }\\n\\n    /**\\n     * @dev Returns NFT back when bridging from L2 to L1\\n     * @param _tokenId token id to unbridge\\n     * @param _to destination address\\n     */\\n    function unbridge(uint256 _tokenId, address _to) public {\\n        token.safeTransferFrom(address(this), _to, _tokenId);\\n        // todo: emit event\\n    }\\n\\n    function onERC721Received(address, address, uint256, bytes calldata) public override returns (bytes4) {\\n            return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0xc5035e5f604bf9b76cefcc30333613998ce63a47a41375fdaaa46a41c2077a27\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610737380380610737833981810160405281019061003291906100ed565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505061011a565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100a88261007d565b9050919050565b60006100ba8261009d565b9050919050565b6100ca816100af565b81146100d557600080fd5b50565b6000815190506100e7816100c1565b92915050565b60006020828403121561010357610102610078565b5b6000610111848285016100d8565b91505092915050565b61060e806101296000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806302b47cb214610051578063150b7a021461006d578063553b5d9c1461009d578063fc0c546a146100b9575b600080fd5b61006b600480360381019061006691906102b1565b6100d7565b005b610087600480360381019061008291906103b4565b6101a5565b6040516100949190610477565b60405180910390f35b6100b760048036038101906100b29190610492565b6101ba565b005b6100c161024d565b6040516100ce9190610531565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3330846040518463ffffffff1660e01b81526004016101349392919061056a565b600060405180830381600087803b15801561014e57600080fd5b505af1158015610162573d6000803e3d6000fd5b505050507f18be74c702ad73ecd2535e47f17075cd1e2c1e1d4ae17c34030c5ff47dfc3728338383604051610199939291906105a1565b60405180910390a15050565b600063150b7a0260e01b905095945050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3083856040518463ffffffff1660e01b81526004016102179392919061056a565b600060405180830381600087803b15801561023157600080fd5b505af1158015610245573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600080fd5b6000819050919050565b61028e8161027b565b811461029957600080fd5b50565b6000813590506102ab81610285565b92915050565b600080604083850312156102c8576102c7610271565b5b60006102d68582860161029c565b92505060206102e78582860161029c565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061031c826102f1565b9050919050565b61032c81610311565b811461033757600080fd5b50565b60008135905061034981610323565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126103745761037361034f565b5b8235905067ffffffffffffffff81111561039157610390610354565b5b6020830191508360018202830111156103ad576103ac610359565b5b9250929050565b6000806000806000608086880312156103d0576103cf610271565b5b60006103de8882890161033a565b95505060206103ef8882890161033a565b94505060406104008882890161029c565b935050606086013567ffffffffffffffff81111561042157610420610276565b5b61042d8882890161035e565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6104718161043c565b82525050565b600060208201905061048c6000830184610468565b92915050565b600080604083850312156104a9576104a8610271565b5b60006104b78582860161029c565b92505060206104c88582860161033a565b9150509250929050565b6000819050919050565b60006104f76104f26104ed846102f1565b6104d2565b6102f1565b9050919050565b6000610509826104dc565b9050919050565b600061051b826104fe565b9050919050565b61052b81610510565b82525050565b60006020820190506105466000830184610522565b92915050565b61055581610311565b82525050565b6105648161027b565b82525050565b600060608201905061057f600083018661054c565b61058c602083018561054c565b610599604083018461055b565b949350505050565b60006060820190506105b6600083018661054c565b6105c3602083018561055b565b6105d0604083018461055b565b94935050505056fea26469706673582212206ef7b6a13c0753451e4b72d1610d17cfa89539cd0526234e3920df72429ed74964736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806302b47cb214610051578063150b7a021461006d578063553b5d9c1461009d578063fc0c546a146100b9575b600080fd5b61006b600480360381019061006691906102b1565b6100d7565b005b610087600480360381019061008291906103b4565b6101a5565b6040516100949190610477565b60405180910390f35b6100b760048036038101906100b29190610492565b6101ba565b005b6100c161024d565b6040516100ce9190610531565b60405180910390f35b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3330846040518463ffffffff1660e01b81526004016101349392919061056a565b600060405180830381600087803b15801561014e57600080fd5b505af1158015610162573d6000803e3d6000fd5b505050507f18be74c702ad73ecd2535e47f17075cd1e2c1e1d4ae17c34030c5ff47dfc3728338383604051610199939291906105a1565b60405180910390a15050565b600063150b7a0260e01b905095945050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166342842e0e3083856040518463ffffffff1660e01b81526004016102179392919061056a565b600060405180830381600087803b15801561023157600080fd5b505af1158015610245573d6000803e3d6000fd5b505050505050565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600080fd5b600080fd5b6000819050919050565b61028e8161027b565b811461029957600080fd5b50565b6000813590506102ab81610285565b92915050565b600080604083850312156102c8576102c7610271565b5b60006102d68582860161029c565b92505060206102e78582860161029c565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061031c826102f1565b9050919050565b61032c81610311565b811461033757600080fd5b50565b60008135905061034981610323565b92915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126103745761037361034f565b5b8235905067ffffffffffffffff81111561039157610390610354565b5b6020830191508360018202830111156103ad576103ac610359565b5b9250929050565b6000806000806000608086880312156103d0576103cf610271565b5b60006103de8882890161033a565b95505060206103ef8882890161033a565b94505060406104008882890161029c565b935050606086013567ffffffffffffffff81111561042157610420610276565b5b61042d8882890161035e565b92509250509295509295909350565b60007fffffffff0000000000000000000000000000000000000000000000000000000082169050919050565b6104718161043c565b82525050565b600060208201905061048c6000830184610468565b92915050565b600080604083850312156104a9576104a8610271565b5b60006104b78582860161029c565b92505060206104c88582860161033a565b9150509250929050565b6000819050919050565b60006104f76104f26104ed846102f1565b6104d2565b6102f1565b9050919050565b6000610509826104dc565b9050919050565b600061051b826104fe565b9050919050565b61052b81610510565b82525050565b60006020820190506105466000830184610522565b92915050565b61055581610311565b82525050565b6105648161027b565b82525050565b600060608201905061057f600083018661054c565b61058c602083018561054c565b610599604083018461055b565b949350505050565b60006060820190506105b6600083018661054c565b6105c3602083018561055b565b6105d0604083018461055b565b94935050505056fea26469706673582212206ef7b6a13c0753451e4b72d1610d17cfa89539cd0526234e3920df72429ed74964736f6c63430008120033",
  "devdoc": {
    "author": "OnGrid Dev Team*",
    "kind": "dev",
    "methods": {
      "bridgeToL2(uint256,uint256)": {
        "details": "Withdraws NFT to replicate it on L2 side",
        "params": {
          "_networkId": "destination L2 network",
          "_tokenId": "token id to bridge"
        }
      },
      "unbridge(uint256,address)": {
        "details": "Returns NFT back when bridging from L2 to L1",
        "params": {
          "_to": "destination address",
          "_tokenId": "token id to unbridge"
        }
      }
    },
    "title": "L1BridgeRouter",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3354,
        "contract": "contracts/L1BridgeRouter.sol:L1BridgeRouter",
        "label": "token",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IERC721)1431"
      }
    ],
    "types": {
      "t_contract(IERC721)1431": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      }
    }
  }
}