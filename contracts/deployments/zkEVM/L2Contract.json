{
  "address": "0x30b43A699066ac73608140386f5056725AfAE7d9",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_l1Contract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_l2Bridge",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "greet",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_greeting",
          "type": "string"
        }
      ],
      "name": "setGreeting",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x6acf2af078b4d5c8550353e1586bf20dd6b7b8e5675535824ea2bd37dbf71618",
  "receipt": {
    "to": null,
    "from": "0x7856D505162CbAa144b82114D399D3b652Da5B8B",
    "contractAddress": "0x30b43A699066ac73608140386f5056725AfAE7d9",
    "transactionIndex": 0,
    "gasUsed": "544758",
    "logsBloom": "0x
    "blockHash": "0x962b5f36697144b1b11d205dd06baf7e98bc63b8486b5f8566d0dc6f53a62755",
    "transactionHash": "0x6acf2af078b4d5c8550353e1586bf20dd6b7b8e5675535824ea2bd37dbf71618",
    "logs": [],
    "blockNumber": 544429,
    "cumulativeGasUsed": "544758",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xE47F3bDf4df1835b75F403bE448f5f9D1283c02c",
    "0xf6beeebb578e214ca9e23b0e9683454ff88ed2a7"
  ],
  "numDeployments": 1,
  "solcInputHash": "18db217825d70698d22fbabd7dd7a859",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_l1Contract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_l2Bridge\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"greet\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_greeting\",\"type\":\"string\"}],\"name\":\"setGreeting\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/L2Contract.sol\":\"L2Contract\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/IBridge.sol\":{\"content\":\"// SPDX-License-Identifier: OWNED BY ConsenSys Software Inc.\\npragma solidity ^0.8.0;\\n\\n/// @title The bridge interface implemented on both chains\\ninterface IBridge {\\n  /// @notice Emitted on the origin chain when a message is to be sent to the destination chain\\n  /// @param _from the msg.sender calling the origin bridge\\n  /// @param _to the destination contract on the destination chain\\n  /// @param _fee the bridge fee on the origin chain\\n  /// @param _value the value to be transferred\\n  /// @param _deadline timestamp as second since unix epoch after which the transaction is invalid and can be dropped\\n  /// @param _calldata the calldata used by the destination bridge to call the destination contract\\n  /// @dev _calldata can be calculated using abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", recipient, amount))\\n  event MessageDispatched(\\n    address _from,\\n    address _to,\\n    uint256 _fee,\\n    uint256 _value,\\n    uint256 _deadline,\\n    bytes _calldata\\n  );\\n\\n  /// @notice Emitted on the destination chain when a message bas been received by the destination bridge\\n  /// @param _from the msg.sender calling the origin bridge\\n  /// @param _to the destination contract on the destination chain\\n  /// @param _fee the bridge fee on the origin chain\\n  /// @param _value the value to be transferred\\n  /// @param _deadline timestamp as second since unix epoch after which the transaction is invalid and can be dropped\\n  /// @param _calldata the calldata used by the destination bridge to call the destination contract\\n  /// @dev _calldata can be calculated using abi.encodeWithSignature(\\\"transfer(address,uint256)\\\", recipient, amount))\\n  event MessageDelivered(\\n    address _from,\\n    address _to,\\n    uint256 _fee,\\n    uint256 _value,\\n    uint256 _deadline,\\n    bytes _calldata\\n  );\\n\\n  /// @notice Dispatches a message from the given chain. Must be called by a developer or another contract.\\n  /// @notice If this is the L2 bridge, then this methods dispatches a message from L2 to L1.\\n  /// @dev This function should be called with a value > _fee. The reminder will be send on the destination chain.\\n  /// @param _to the destination contract on the destination chain\\n  /// @param _fee the bridge fee on the origin chain\\n  /// @param _deadline timestamp as second since unix epoch after which the transaction is invalid and can be dropped\\n  /// @param _calldata the calldata used by the destination bridge to call the destination contract\\n  function dispatchMessage(\\n    address _to,\\n    uint256 _fee,\\n    uint256 _deadline,\\n    bytes calldata _calldata\\n  ) external payable;\\n\\n  /// @notice Deliver a message to the destination chain.\\n  /// @notice Is called automatically by the operator. Cannot be used by developers\\n  /// @param _from the msg.sender calling the origin bridge\\n  /// @param _to the destination contract on the destination chain\\n  /// @param _fee the bridge fee on the origin chain\\n  /// @param _value the value to be transferred\\n  /// @param _deadline timestamp as second since unix epoch after which the transaction is invalid and can be dropped\\n  /// @param _calldata the calldata used by the destination bridge to call the destination contract\\n  function deliverMessage(\\n    address _from,\\n    address _to,\\n    uint256 _fee,\\n    uint256 _value,\\n    uint256 _deadline,\\n    bytes calldata _calldata\\n  ) external payable;\\n\\n  /// @notice When called within the context of the delivered call can be used to return the sender (_from)\\n  /// @notice on the origin chain otherwise returns the zero address.\\n  /// @return Address of the caller contract on the origin chain.\\n  function sender() external view returns (address);\\n}\",\"keccak256\":\"0x80953ba3ed746792a42f4a865784b92b0d169bd0e22a023dfd7e2fe174eae7fd\",\"license\":\"OWNED BY ConsenSys Software Inc.\"},\"contracts/L2Contract.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IBridge.sol\\\";\\n\\ncontract L2Contract {\\n    string private greeting;\\n    address l1Contract;\\n    address l2Bridge;\\n\\n    constructor(address _l1Contract, address _l2Bridge) {\\n      l1Contract = _l1Contract;\\n      l2Bridge = _l2Bridge;\\n    }\\n\\n    function greet() public view returns (string memory) {\\n        return greeting;\\n    }\\n\\n    function setGreeting(string memory _greeting) public {\\n        IBridge bridge = IBridge(l2Bridge);\\n        address sender = bridge.sender();\\n        require(sender == l1Contract);\\n        greeting = _greeting;\\n    }\\n}\",\"keccak256\":\"0x4957a8b993a8abed35e1f210514dc2e66338ebac1edb08c28476a81fc9c65f55\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5060405161096a38038061096a8339818101604052810190610032919061011e565b81600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505061015e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100eb826100c0565b9050919050565b6100fb816100e0565b811461010657600080fd5b50565b600081519050610118816100f2565b92915050565b60008060408385031215610135576101346100bb565b5b600061014385828601610109565b925050602061015485828601610109565b9150509250929050565b6107fd8061016d6000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063a41368621461003b578063cfae321714610057575b600080fd5b6100556004803603810190610050919061036a565b610075565b005b61005f61017e565b60405161006c9190610432565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166367e404ce6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010d91906104b2565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461016957600080fd5b826000908161017891906106f5565b50505050565b60606000805461018d9061050e565b80601f01602080910402602001604051908101604052809291908181526020018280546101b99061050e565b80156102065780601f106101db57610100808354040283529160200191610206565b820191906000526020600020905b8154815290600101906020018083116101e957829003601f168201915b5050505050905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102778261022e565b810181811067ffffffffffffffff821117156102965761029561023f565b5b80604052505050565b60006102a9610210565b90506102b5828261026e565b919050565b600067ffffffffffffffff8211156102d5576102d461023f565b5b6102de8261022e565b9050602081019050919050565b82818337600083830152505050565b600061030d610308846102ba565b61029f565b90508281526020810184848401111561032957610328610229565b5b6103348482856102eb565b509392505050565b600082601f83011261035157610350610224565b5b81356103618482602086016102fa565b91505092915050565b6000602082840312156103805761037f61021a565b5b600082013567ffffffffffffffff81111561039e5761039d61021f565b5b6103aa8482850161033c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156103ed5780820151818401526020810190506103d2565b60008484015250505050565b6000610404826103b3565b61040e81856103be565b935061041e8185602086016103cf565b6104278161022e565b840191505092915050565b6000602082019050818103600083015261044c81846103f9565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061047f82610454565b9050919050565b61048f81610474565b811461049a57600080fd5b50565b6000815190506104ac81610486565b92915050565b6000602082840312156104c8576104c761021a565b5b60006104d68482850161049d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061052657607f821691505b602082108103610539576105386104df565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026105a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610564565b6105ab8683610564565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006105f26105ed6105e8846105c3565b6105cd565b6105c3565b9050919050565b6000819050919050565b61060c836105d7565b610620610618826105f9565b848454610571565b825550505050565b600090565b610635610628565b610640818484610603565b505050565b5b818110156106645761065960008261062d565b600181019050610646565b5050565b601f8211156106a95761067a8161053f565b61068384610554565b81016020851015610692578190505b6106a661069e85610554565b830182610645565b50505b505050565b600082821c905092915050565b60006106cc600019846008026106ae565b1980831691505092915050565b60006106e583836106bb565b9150826002028217905092915050565b6106fe826103b3565b67ffffffffffffffff8111156107175761071661023f565b5b610721825461050e565b61072c828285610668565b600060209050601f83116001811461075f576000841561074d578287015190505b61075785826106d9565b8655506107bf565b601f19841661076d8661053f565b60005b8281101561079557848901518255600182019150602085019450602081019050610770565b868310156107b257848901516107ae601f8916826106bb565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220bba3c32c82287d2482189fc6c4dd03f60a5b920c3cfb9bd9cf456994771f44e464736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100365760003560e01c8063a41368621461003b578063cfae321714610057575b600080fd5b6100556004803603810190610050919061036a565b610075565b005b61005f61017e565b60405161006c9190610432565b60405180910390f35b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008173ffffffffffffffffffffffffffffffffffffffff166367e404ce6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156100e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061010d91906104b2565b9050600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161461016957600080fd5b826000908161017891906106f5565b50505050565b60606000805461018d9061050e565b80601f01602080910402602001604051908101604052809291908181526020018280546101b99061050e565b80156102065780601f106101db57610100808354040283529160200191610206565b820191906000526020600020905b8154815290600101906020018083116101e957829003601f168201915b5050505050905090565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6102778261022e565b810181811067ffffffffffffffff821117156102965761029561023f565b5b80604052505050565b60006102a9610210565b90506102b5828261026e565b919050565b600067ffffffffffffffff8211156102d5576102d461023f565b5b6102de8261022e565b9050602081019050919050565b82818337600083830152505050565b600061030d610308846102ba565b61029f565b90508281526020810184848401111561032957610328610229565b5b6103348482856102eb565b509392505050565b600082601f83011261035157610350610224565b5b81356103618482602086016102fa565b91505092915050565b6000602082840312156103805761037f61021a565b5b600082013567ffffffffffffffff81111561039e5761039d61021f565b5b6103aa8482850161033c565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156103ed5780820151818401526020810190506103d2565b60008484015250505050565b6000610404826103b3565b61040e81856103be565b935061041e8185602086016103cf565b6104278161022e565b840191505092915050565b6000602082019050818103600083015261044c81846103f9565b905092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061047f82610454565b9050919050565b61048f81610474565b811461049a57600080fd5b50565b6000815190506104ac81610486565b92915050565b6000602082840312156104c8576104c761021a565b5b60006104d68482850161049d565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000600282049050600182168061052657607f821691505b602082108103610539576105386104df565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026105a17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610564565b6105ab8683610564565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b60006105f26105ed6105e8846105c3565b6105cd565b6105c3565b9050919050565b6000819050919050565b61060c836105d7565b610620610618826105f9565b848454610571565b825550505050565b600090565b610635610628565b610640818484610603565b505050565b5b818110156106645761065960008261062d565b600181019050610646565b5050565b601f8211156106a95761067a8161053f565b61068384610554565b81016020851015610692578190505b6106a661069e85610554565b830182610645565b50505b505050565b600082821c905092915050565b60006106cc600019846008026106ae565b1980831691505092915050565b60006106e583836106bb565b9150826002028217905092915050565b6106fe826103b3565b67ffffffffffffffff8111156107175761071661023f565b5b610721825461050e565b61072c828285610668565b600060209050601f83116001811461075f576000841561074d578287015190505b61075785826106d9565b8655506107bf565b601f19841661076d8661053f565b60005b8281101561079557848901518255600182019150602085019450602081019050610770565b868310156107b257848901516107ae601f8916826106bb565b8355505b6001600288020188555050505b50505050505056fea2646970667358221220bba3c32c82287d2482189fc6c4dd03f60a5b920c3cfb9bd9cf456994771f44e464736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 72,
        "contract": "contracts/L2Contract.sol:L2Contract",
        "label": "greeting",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 74,
        "contract": "contracts/L2Contract.sol:L2Contract",
        "label": "l1Contract",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 76,
        "contract": "contracts/L2Contract.sol:L2Contract",
        "label": "l2Bridge",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      }
    }
  }
}