version: '3'
services:
  ingress:
    build: ./ingress/
    ports:
      - 443:443
    image: ingress
    volumes:
      - /etc/ssl:/etc/ssl
      - backend_static:/backend_static/
      - media:/media
    restart: on-failure
    depends_on:
      - api
      - app

  api_db:
    image: postgres
    volumes:
      - db:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: '${DB_NAME}'
      POSTGRES_USER: '${DB_USER}'
      POSTGRES_PASSWORD: '${DB_PASSWORD}'

  api:
    image: api
    build: ./api
    volumes:
      - backend_static:/backend_static/
      - media:/app/media/
    environment:
      SECRET_KEY: '${SECRET_KEY}'
      DB_NAME: '${DB_NAME}'
      DB_USER: '${DB_USER}'
      DB_PASSWORD: '${DB_PASSWORD}'
      DB_PORT: '5432'
      DB_HOST: api_db
      ADMIN_USER: '${ADMIN_USER}'
      ADMIN_PASSWORD: '${ADMIN_PASSWORD}'
      ETH_CHAIN_ID: '${ETH_CHAIN_ID}'
      ETH_START_BLOCK: '${ETH_START_BLOCK}'
      ZKSYNC_CHAIN_ID: '${ZKSYNC_CHAIN_ID}'
      ZKSYNC_START_BLOCK: '${ZKSYNC_START_BLOCK}'
      POLYGON_ZK_EVM_ID: '${POLYGON_ZK_EVM_ID}'
      POLYGON_ZK_EVM_START_BLOCK: '${POLYGON_ZK_EVM_START_BLOCK}'
      SCROLL_CHAIN_ID: '${SCROLL_CHAIN_ID}'
      SCROLL_START_BLOCK: '${SCROLL_START_BLOCK}'
    restart: on-failure
    depends_on:
      - api_db

  eth_indexer:
    image: api
    build: ./api
    volumes:
      - media:/app/media/
    environment:
      SECRET_KEY: '${SECRET_KEY}'
      UPSTREAM: '${ETH_UPSTREAM}'
      TOKEN_ABI_FILENAME: 'indexers/erc721-abi.json'
      TOKEN_ADDRESS: '${ETH_TOKEN_ADDRESS}'
      BRIDGE_ADDRESS: '${ETH_BRIDGE_ADDRESS}'
      INDEXER_INTERVAL: '${INDEXER_INTERVAL}'
      DB_NAME: '${DB_NAME}'
      DB_USER: '${DB_USER}'
      DB_PASSWORD: '${DB_PASSWORD}'
      DB_PORT: '5432'
      DB_HOST: api_db
    command: python3 indexers/start.py
    restart: on-failure
    depends_on:
      - api_db

  app:
    image: app
    build:
      context: ./app
      dockerfile: Dockerfile
      args:
        REACT_APP_API_HOST: '${REACT_APP_API_HOST}'
    restart: on-failure

  client:
    build: ./graph/client
    depends_on:
      - ipfs
      - graph_node
    environment:
      ipfs: 'ipfs:5001'
  graph_node:
    image: graphprotocol/graph-node
    ports:
      - '8000:8000'
      - '8001:8001'
      - '8020:8020'
      - '8030:8030'
      - '8040:8040'
    depends_on:
      - ipfs
      - graph_postgres
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      postgres_host: graph_postgres
      postgres_user: graph-node
      postgres_pass: let-me-in
      postgres_db: graph-node
      ipfs: 'ipfs:5001'
      ethereum: 'goerli:https://eth-goerli.g.alchemy.com/v2/ACGsTC9jdOnFCbXHXnrjA9O6HfgHIcCX'
      GRAPH_LOG: info
  ipfs:
    image: ipfs/go-ipfs:latest
    environment:
      - IPFS_PROFILE=server
      - IPFS_PATH=/data/ipfs
    ports:
      - '5001:5001'
    volumes:
      - ./graph/data/ipfs:/data/ipfs
  graph_postgres:
    image: postgres
    ports:
      - '5433:5433'
    command:
      [
        "postgres",
        "-cshared_preload_libraries=pg_stat_statements"
      ]
    environment:
      POSTGRES_USER: graph-node
      POSTGRES_PASSWORD: let-me-in
      POSTGRES_DB: graph-node
      # FIXME: remove this env. var. which we shouldn't need. Introduced by
      # <https://github.com/graphprotocol/graph-node/pull/3511>, maybe as a
      # workaround for https://github.com/docker/for-mac/issues/6270?
      PGDATA: "/var/lib/postgresql/data"
      POSTGRES_INITDB_ARGS: "-E UTF8 --locale=C"
    volumes:
      - ./graph/data/postgres:/var/lib/postgresql/data

volumes:
  backend_static:
  db:
  media:
